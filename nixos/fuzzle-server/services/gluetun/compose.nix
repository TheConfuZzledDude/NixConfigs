# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, config, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [ 53 ];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."gluetun" = {
    image = "qmcgaw/gluetun";
    environment = {
      "HTTPPROXY" = "on";
      "SERVER_CITIES" = "London";
      "VPN_SERVICE_PROVIDER" = "mullvad";
      "VPN_TYPE" = "wireguard";
    };
    ports = [
      "8888:8888/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--device=/dev/net/tun:/dev/net/tun:rwm"
      "--network-alias=gluetun"
      "--network=gluetun_default"
    ];
  };
  systemd.services."podman-gluetun" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-gluetun_default.service"
    ];
    requires = [
      "podman-network-gluetun_default.service"
    ];
    partOf = [
      "podman-compose-gluetun-root.target"
    ];
    wantedBy = [
      "podman-compose-gluetun-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-gluetun_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f gluetun_default";
    };
    script = ''
      podman network inspect gluetun_default || podman network create gluetun_default
    '';
    partOf = [ "podman-compose-gluetun-root.target" ];
    wantedBy = [ "podman-compose-gluetun-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-gluetun-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
