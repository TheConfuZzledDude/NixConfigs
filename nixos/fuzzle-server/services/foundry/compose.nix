# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, lib, config, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces = let
    matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
  in {
    "${matchAll}".allowedUDPPorts = [ 53 ];
  };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."foundry-container-foundry" = {
    image = "felddy/foundryvtt:release";
    environment = {
      "FOUNDRY_AWS_CONFIG" = "/run/aws.json";
    };
    volumes = [
      "/run/secrets/foundry-aws:/run/aws.json:rw"
      "foundry-container_foundry-data:/data:rw"
    ];
    ports = [
      "30000:30000/tcp"
    ];
    user = "421:421";
    log-driver = "journald";
    extraOptions = [
      "--hostname=foundry.fuzzle.uk"
      "--network-alias=foundry"
      "--network=foundry-container_default"
    ];
  };
  systemd.services."podman-foundry-container-foundry" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-foundry-container_default.service"
      "podman-volume-foundry-container_foundry-data.service"
    ];
    requires = [
      "podman-network-foundry-container_default.service"
      "podman-volume-foundry-container_foundry-data.service"
    ];
    partOf = [
      "podman-compose-foundry-container-root.target"
    ];
    wantedBy = [
      "podman-compose-foundry-container-root.target"
    ];
  };
  virtualisation.oci-containers.containers."foundry-container-foundry2" = {
    image = "felddy/foundryvtt:release";
    environment = {
      "FOUNDRY_AWS_CONFIG" = "/run/aws.json";
    };
    volumes = [
      "/run/secrets/foundry-aws:/run/aws.json:rw"
      "foundry-container_baylok-data:/data:rw"
    ];
    ports = [
      "30000:30001/tcp"
    ];
    user = "421:421";
    log-driver = "journald";
    extraOptions = [
      "--hostname=foundry-baylok.fuzzle.uk"
      "--network-alias=foundry2"
      "--network=foundry-container_default"
    ];
  };
  systemd.services."podman-foundry-container-foundry2" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "podman-network-foundry-container_default.service"
      "podman-volume-foundry-container_baylok-data.service"
    ];
    requires = [
      "podman-network-foundry-container_default.service"
      "podman-volume-foundry-container_baylok-data.service"
    ];
    partOf = [
      "podman-compose-foundry-container-root.target"
    ];
    wantedBy = [
      "podman-compose-foundry-container-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-foundry-container_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f foundry-container_default";
    };
    script = ''
      podman network inspect foundry-container_default || podman network create foundry-container_default
    '';
    partOf = [ "podman-compose-foundry-container-root.target" ];
    wantedBy = [ "podman-compose-foundry-container-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-foundry-container_baylok-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect foundry-container_baylok-data || podman volume create foundry-container_baylok-data
    '';
    partOf = [ "podman-compose-foundry-container-root.target" ];
    wantedBy = [ "podman-compose-foundry-container-root.target" ];
  };
  systemd.services."podman-volume-foundry-container_foundry-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect foundry-container_foundry-data || podman volume create foundry-container_foundry-data
    '';
    partOf = [ "podman-compose-foundry-container-root.target" ];
    wantedBy = [ "podman-compose-foundry-container-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-foundry-container-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
